/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Contract","structs":{},"methods":[{"name":"create","args":[{"type":"asset","name":"asset_id"},{"type":"string","name":"name"},{"type":"string","name":"unit"},{"type":"string","name":"metadata_url"},{"type":"uint64","name":"amount_required"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"mint_badge","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"claim_badge","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"assetId":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRJZA=="},"amount_required":{"keyType":"AVMString","valueType":"AVMUint64","key":"YW1vdW50X3JlcXVpcmVk"},"badge_name":{"keyType":"AVMString","valueType":"AVMString","key":"YmFkZ2VfbmFtZQ=="},"badge_unit":{"keyType":"AVMString","valueType":"AVMString","key":"YmFkZ2VfdW5pdA=="},"badge_metadata_url":{"keyType":"AVMString","valueType":"AVMString","key":"YmFkZ2VfbWV0YWRhdGFfdXJs"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"badge_owners":{"keyType":"address","valueType":"uint64","prefix":"YmFkZ2Vfb3duZXJz"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[123,135,157],"errorMessage":"OnCompletion is not NoOp"},{"pc":[229],"errorMessage":"account opted into asset"},{"pc":[161],"errorMessage":"can only call when creating"},{"pc":[126,138],"errorMessage":"can only call when not creating"},{"pc":[233],"errorMessage":"check self.amount_required exists"},{"pc":[226],"errorMessage":"check self.assetId exists"},{"pc":[250],"errorMessage":"check self.badge_metadata_url exists"},{"pc":[245],"errorMessage":"check self.badge_name exists"},{"pc":[310],"errorMessage":"check self.badge_owners entry exists"},{"pc":[241],"errorMessage":"check self.badge_unit exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiACAAEmBgxiYWRnZV9vd25lcnMHYXNzZXRJZA9hbW91bnRfcmVxdWlyZWQKYmFkZ2VfbmFtZQpiYWRnZV91bml0EmJhZGdlX21ldGFkYXRhX3VybDEbQQAcggMEDnlsmQT2RQBGBNGPOac2GgCOAwAkAA4AAiJDMRkURDEYRIgApyNDMRkURDEYRIgATxaABBUffHVMULAjQzEZFEQxGBRENhoBF8AwNhoCVwIANhoDVwIANhoEVwIANhoFF4gAAiNDigUAKYv7ZyqL/2cri/xnJwSL/WcnBYv+Z4kxACIpZURwAEQiKmVED0SxIicEZUQiK2VEIicFZUQyCkcDIrIksiyyKbIqsiuyJ7ImsiUisiMjsiKBA7IQIrIBs7Q8KDEAUEsBFr+JKDEAUL1FAUQoMQBQvkQXsTEAshQjshKyEYEEshAisgGzKDEAULxIiQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":9,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Contract contract
 */
export type ContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create(asset,string,string,string,uint64)void': {
      assetId: bigint
      name: string
      unit: string
      metadataUrl: string
      amountRequired: bigint | number
    }
    'mint_badge()uint64': Record<string, never>
    'claim_badge()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create(asset,string,string,string,uint64)void': [assetId: bigint, name: string, unit: string, metadataUrl: string, amountRequired: bigint | number]
    'mint_badge()uint64': []
    'claim_badge()void': []
  }
}

/**
 * The return type for each method
 */
export type ContractReturns = {
  'create(asset,string,string,string,uint64)void': void
  'mint_badge()uint64': bigint
  'claim_badge()void': void
}

/**
 * Defines the types of available calls and state of the Contract smart contract.
 */
export type ContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(asset,string,string,string,uint64)void' | 'create', {
      argsObj: ContractArgs['obj']['create(asset,string,string,string,uint64)void']
      argsTuple: ContractArgs['tuple']['create(asset,string,string,string,uint64)void']
      returns: ContractReturns['create(asset,string,string,string,uint64)void']
    }>
    & Record<'mint_badge()uint64' | 'mint_badge', {
      argsObj: ContractArgs['obj']['mint_badge()uint64']
      argsTuple: ContractArgs['tuple']['mint_badge()uint64']
      returns: ContractReturns['mint_badge()uint64']
    }>
    & Record<'claim_badge()void' | 'claim_badge', {
      argsObj: ContractArgs['obj']['claim_badge()void']
      argsTuple: ContractArgs['tuple']['claim_badge()void']
      returns: ContractReturns['claim_badge()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        assetId: bigint
        amountRequired: bigint
        badgeName: string
        badgeUnit: string
        badgeMetadataUrl: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        badgeOwners: Map<string, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ContractSignatures = keyof ContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ContractNonVoidMethodSignatures = keyof ContractTypes['methods'] extends infer T ? T extends keyof ContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Contract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ContractSignatures> = ContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Contract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ContractSignatures> = ContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = ContractTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = ContractTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ContractCreateCallParams =
  | Expand<CallParams<ContractArgs['obj']['create(asset,string,string,string,uint64)void'] | ContractArgs['tuple']['create(asset,string,string,string,uint64)void']> & {method: 'create'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<ContractArgs['obj']['create(asset,string,string,string,uint64)void'] | ContractArgs['tuple']['create(asset,string,string,string,uint64)void']> & {method: 'create(asset,string,string,string,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Contract smart contract
 */
export abstract class ContractParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends ContractCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create':
          case 'create(asset,string,string,string,uint64)void':
            return ContractParamsFactory.create.create(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Contract smart contract using the create(asset,string,string,string,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      create(params: CallParams<ContractArgs['obj']['create(asset,string,string,string,uint64)void'] | ContractArgs['tuple']['create(asset,string,string,string,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create(asset,string,string,string,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.name, params.args.unit, params.args.metadataUrl, params.args.amountRequired],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the mint_badge()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mintBadge(params: CallParams<ContractArgs['obj']['mint_badge()uint64'] | ContractArgs['tuple']['mint_badge()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mint_badge()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the claim_badge()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimBadge(params: CallParams<ContractArgs['obj']['claim_badge()void'] | ContractArgs['tuple']['claim_badge()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claim_badge()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Contract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Contract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? ContractParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (ContractCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new ContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Contract smart contract using the create(asset,string,string,string,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      create: (params: CallParams<ContractArgs['obj']['create(asset,string,string,string,uint64)void'] | ContractArgs['tuple']['create(asset,string,string,string,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(ContractParamsFactory.create.create(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Contract smart contract using the create(asset,string,string,string,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      create: (params: CallParams<ContractArgs['obj']['create(asset,string,string,string,uint64)void'] | ContractArgs['tuple']['create(asset,string,string,string,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(ContractParamsFactory.create.create(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Contract smart contract using an ABI method call using the create(asset,string,string,string,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      create: async (params: CallParams<ContractArgs['obj']['create(asset,string,string,string,uint64)void'] | ContractArgs['tuple']['create(asset,string,string,string,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(ContractParamsFactory.create.create(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | ContractReturns['create(asset,string,string,string,uint64)void']) }, appClient: new ContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Contract smart contract
 */
export class ContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Contract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ContractClient> {
    return new ContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ContractClient> {
    return new ContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Contract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Contract smart contract using the `mint_badge()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mintBadge: (params: CallParams<ContractArgs['obj']['mint_badge()uint64'] | ContractArgs['tuple']['mint_badge()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ContractParamsFactory.mintBadge(params))
    },

    /**
     * Makes a call to the Contract smart contract using the `claim_badge()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimBadge: (params: CallParams<ContractArgs['obj']['claim_badge()void'] | ContractArgs['tuple']['claim_badge()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ContractParamsFactory.claimBadge(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Contract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Contract smart contract using the `mint_badge()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mintBadge: (params: CallParams<ContractArgs['obj']['mint_badge()uint64'] | ContractArgs['tuple']['mint_badge()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ContractParamsFactory.mintBadge(params))
    },

    /**
     * Makes a call to the Contract smart contract using the `claim_badge()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimBadge: (params: CallParams<ContractArgs['obj']['claim_badge()void'] | ContractArgs['tuple']['claim_badge()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ContractParamsFactory.claimBadge(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Contract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Contract smart contract using the `mint_badge()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mintBadge: async (params: CallParams<ContractArgs['obj']['mint_badge()uint64'] | ContractArgs['tuple']['mint_badge()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ContractParamsFactory.mintBadge(params))
      return {...result, return: result.return as unknown as (undefined | ContractReturns['mint_badge()uint64'])}
    },

    /**
     * Makes a call to the Contract smart contract using the `claim_badge()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimBadge: async (params: CallParams<ContractArgs['obj']['claim_badge()void'] | ContractArgs['tuple']['claim_badge()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ContractParamsFactory.claimBadge(params))
      return {...result, return: result.return as unknown as (undefined | ContractReturns['claim_badge()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Contract app
   */
  state = {
    /**
     * Methods to access global state for the current Contract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          assetId: result.assetId,
          amountRequired: result.amount_required,
          badgeName: result.badge_name,
          badgeUnit: result.badge_unit,
          badgeMetadataUrl: result.badge_metadata_url,
        }
      },
      /**
       * Get the current value of the assetId key in global state
       */
      assetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetId")) as bigint | undefined },
      /**
       * Get the current value of the amount_required key in global state
       */
      amountRequired: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("amount_required")) as bigint | undefined },
      /**
       * Get the current value of the badge_name key in global state
       */
      badgeName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("badge_name")) as string | undefined },
      /**
       * Get the current value of the badge_unit key in global state
       */
      badgeUnit: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("badge_unit")) as string | undefined },
      /**
       * Get the current value of the badge_metadata_url key in global state
       */
      badgeMetadataUrl: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("badge_metadata_url")) as string | undefined },
    },
    /**
     * Methods to access box state for the current Contract app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the badge_owners map in box state
       */
      badgeOwners: {
        /**
         * Get all current values of the badge_owners map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("badge_owners")) as Map<string, bigint> },
        /**
         * Get a current value of the badge_owners map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("badge_owners", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): ContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a mint_badge()uint64 method call against the Contract contract
       */
      mintBadge(params: CallParams<ContractArgs['obj']['mint_badge()uint64'] | ContractArgs['tuple']['mint_badge()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mintBadge(params)))
        resultMappers.push((v) => client.decodeReturnValue('mint_badge()uint64', v))
        return this
      },
      /**
       * Add a claim_badge()void method call against the Contract contract
       */
      claimBadge(params: CallParams<ContractArgs['obj']['claim_badge()void'] | ContractArgs['tuple']['claim_badge()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimBadge(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Contract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ContractComposer
  }
}
export type ContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the mint_badge()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintBadge(params?: CallParams<ContractArgs['obj']['mint_badge()uint64'] | ContractArgs['tuple']['mint_badge()uint64']>): ContractComposer<[...TReturns, ContractReturns['mint_badge()uint64'] | undefined]>

  /**
   * Calls the claim_badge()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimBadge(params?: CallParams<ContractArgs['obj']['claim_badge()void'] | ContractArgs['tuple']['claim_badge()void']>): ContractComposer<[...TReturns, ContractReturns['claim_badge()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Contract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ContractComposerResults<TReturns>>
}
export type ContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

