/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"TokenizerContract","structs":{},"methods":[{"name":"modify_asa","args":[{"type":"asset","name":"asa_id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"modify_admin","args":[{"type":"account","name":"admin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"verified_airdrop","args":[{"type":"uint64","name":"amount"},{"type":"account","name":"recipient"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"address","key":"YWRtaW4="},"asa_id":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNhX2lk"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[67,89,107],"errorMessage":"OnCompletion is not NoOp"},{"pc":[175],"errorMessage":"Only admin can airdrop"},{"pc":[184],"errorMessage":"asset exists"},{"pc":[130],"errorMessage":"can only call when creating"},{"pc":[70,92,110],"errorMessage":"can only call when not creating"},{"pc":[141,157,173],"errorMessage":"check self.admin exists"},{"pc":[180],"errorMessage":"check self.asa_id exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMuY29udHJhY3QuY29udHJhY3QuVG9rZW5pemVyQ29udHJhY3QuX19hbGdvcHlfZW50cnlwb2ludF93aXRoX2luaXQoKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxCiAgICBieXRlY2Jsb2NrICJhZG1pbiIgImFzYV9pZCIKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb250cmFjdC9jb250cmFjdC5weTo2CiAgICAvLyBzZWxmLmFkbWluID0gR2xvYmFsU3RhdGUoVHhuLnNlbmRlcikKICAgIGJ5dGVjXzAgLy8gImFkbWluIgogICAgdHhuIFNlbmRlcgogICAgYXBwX2dsb2JhbF9wdXQKCm1haW5fYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NvbnRyYWN0L2NvbnRyYWN0LnB5OjQKICAgIC8vIGNsYXNzIFRva2VuaXplckNvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAOAogICAgcHVzaGJ5dGVzcyAweDI0ZDQzMDVkIDB4YmJhM2RhOGIgMHgyNDgzOTY4YiAvLyBtZXRob2QgIm1vZGlmeV9hc2EoYXNzZXQpdm9pZCIsIG1ldGhvZCAibW9kaWZ5X2FkbWluKGFjY291bnQpdm9pZCIsIG1ldGhvZCAidmVyaWZpZWRfYWlyZHJvcCh1aW50NjQsYWNjb3VudCl2b2lkIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9tb2RpZnlfYXNhX3JvdXRlQDUgbWFpbl9tb2RpZnlfYWRtaW5fcm91dGVANiBtYWluX3ZlcmlmaWVkX2FpcmRyb3Bfcm91dGVANwoKbWFpbl9hZnRlcl9pZl9lbHNlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NvbnRyYWN0L2NvbnRyYWN0LnB5OjQKICAgIC8vIGNsYXNzIFRva2VuaXplckNvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX3ZlcmlmaWVkX2FpcmRyb3Bfcm91dGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb250cmFjdC9jb250cmFjdC5weToxOQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb250cmFjdC9jb250cmFjdC5weTo0CiAgICAvLyBjbGFzcyBUb2tlbml6ZXJDb250cmFjdChBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb250cmFjdC9jb250cmFjdC5weToxOQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIHZlcmlmaWVkX2FpcmRyb3AKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fbW9kaWZ5X2FkbWluX3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY29udHJhY3QvY29udHJhY3QucHk6MTQKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvY29udHJhY3QvY29udHJhY3QucHk6NAogICAgLy8gY2xhc3MgVG9rZW5pemVyQ29udHJhY3QoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmFzIEFjY291bnRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvY29udHJhY3QvY29udHJhY3QucHk6MTQKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiBtb2RpZnlfYWRtaW4KICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fbW9kaWZ5X2FzYV9yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2NvbnRyYWN0L2NvbnRyYWN0LnB5OjkKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvY29udHJhY3QvY29udHJhY3QucHk6NAogICAgLy8gY2xhc3MgVG9rZW5pemVyQ29udHJhY3QoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmFzIEFzc2V0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2NvbnRyYWN0L2NvbnRyYWN0LnB5OjkKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiBtb2RpZnlfYXNhCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0A4OgogICAgLy8gc21hcnRfY29udHJhY3RzL2NvbnRyYWN0L2NvbnRyYWN0LnB5OjQKICAgIC8vIGNsYXNzIFRva2VuaXplckNvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDEwCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5jb250cmFjdC5jb250cmFjdC5Ub2tlbml6ZXJDb250cmFjdC5tb2RpZnlfYXNhKGFzYV9pZDogdWludDY0KSAtPiB2b2lkOgptb2RpZnlfYXNhOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NvbnRyYWN0L2NvbnRyYWN0LnB5OjktMTAKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gZGVmIG1vZGlmeV9hc2Eoc2VsZiwgYXNhX2lkOiBBc3NldCkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2NvbnRyYWN0L2NvbnRyYWN0LnB5OjExCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmFkbWluLnZhbHVlCiAgICB0eG4gU2VuZGVyCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAiYWRtaW4iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYWRtaW4gZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY29udHJhY3QvY29udHJhY3QucHk6MTIKICAgIC8vIHNlbGYuYXNhX2lkLnZhbHVlID0gYXNhX2lkCiAgICBieXRlY18xIC8vICJhc2FfaWQiCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuY29udHJhY3QuY29udHJhY3QuVG9rZW5pemVyQ29udHJhY3QubW9kaWZ5X2FkbWluKGFkbWluOiBieXRlcykgLT4gdm9pZDoKbW9kaWZ5X2FkbWluOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NvbnRyYWN0L2NvbnRyYWN0LnB5OjE0LTE1CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBtb2RpZnlfYWRtaW4oc2VsZiwgYWRtaW46IEFjY291bnQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb250cmFjdC9jb250cmFjdC5weToxNgogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5hZG1pbi52YWx1ZQogICAgdHhuIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gImFkbWluIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFkbWluIGV4aXN0cwogICAgPT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL2NvbnRyYWN0L2NvbnRyYWN0LnB5OjE3CiAgICAvLyBzZWxmLmFkbWluLnZhbHVlID0gYWRtaW4KICAgIGJ5dGVjXzAgLy8gImFkbWluIgogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmNvbnRyYWN0LmNvbnRyYWN0LlRva2VuaXplckNvbnRyYWN0LnZlcmlmaWVkX2FpcmRyb3AoYW1vdW50OiB1aW50NjQsIHJlY2lwaWVudDogYnl0ZXMpIC0+IHZvaWQ6CnZlcmlmaWVkX2FpcmRyb3A6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY29udHJhY3QvY29udHJhY3QucHk6MTktMjAKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gZGVmIHZlcmlmaWVkX2FpcmRyb3Aoc2VsZixhbW91bnQ6IFVJbnQ2NCwgcmVjaXBpZW50OiBBY2NvdW50KSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvY29udHJhY3QvY29udHJhY3QucHk6MjEKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuYWRtaW4udmFsdWUsICJPbmx5IGFkbWluIGNhbiBhaXJkcm9wIgogICAgdHhuIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gImFkbWluIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFkbWluIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBPbmx5IGFkbWluIGNhbiBhaXJkcm9wCiAgICAvLyBzbWFydF9jb250cmFjdHMvY29udHJhY3QvY29udHJhY3QucHk6MjMtMjkKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICBhc3NldF9hbW91bnQ9YW1vdW50LAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPXJlY2lwaWVudCwKICAgIC8vICAgICBhc3NldF9zZW5kZXI9c2VsZi5hc2FfaWQudmFsdWUucmVzZXJ2ZSwKICAgIC8vICAgICBzZW5kZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICB4ZmVyX2Fzc2V0PXNlbGYuYXNhX2lkLnZhbHVlLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2NvbnRyYWN0L2NvbnRyYWN0LnB5OjI2CiAgICAvLyBhc3NldF9zZW5kZXI9c2VsZi5hc2FfaWQudmFsdWUucmVzZXJ2ZSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJhc2FfaWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYXNhX2lkIGV4aXN0cwogICAgZHVwCiAgICBhc3NldF9wYXJhbXNfZ2V0IEFzc2V0UmVzZXJ2ZQogICAgYXNzZXJ0IC8vIGFzc2V0IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2NvbnRyYWN0L2NvbnRyYWN0LnB5OjI3CiAgICAvLyBzZW5kZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICB1bmNvdmVyIDIKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICBpdHhuX2ZpZWxkIFNlbmRlcgogICAgaXR4bl9maWVsZCBBc3NldFNlbmRlcgogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIGZyYW1lX2RpZyAtMgogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL2NvbnRyYWN0L2NvbnRyYWN0LnB5OjIzCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICBwdXNoaW50IDQgLy8gYXhmZXIKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2NvbnRyYWN0L2NvbnRyYWN0LnB5OjIzLTI5CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PWFtb3VudCwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1yZWNpcGllbnQsCiAgICAvLyAgICAgYXNzZXRfc2VuZGVyPXNlbGYuYXNhX2lkLnZhbHVlLnJlc2VydmUsCiAgICAvLyAgICAgc2VuZGVyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgeGZlcl9hc3NldD1zZWxmLmFzYV9pZC52YWx1ZSwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIK","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiACAAEmAgVhZG1pbgZhc2FfaWQxGEAABCgxAGcxG0EAWIIDBCTUMF0Eu6PaiwQkg5aLNhoAjgMAKgAYAAIiQzEZFEQxGEQ2GgEXNhoCF8AciABRI0MxGRREMRhENhoBF8AciAAvI0MxGRREMRhENhoBF8AwiAANI0MxGUD/vzEYFEQjQ4oBADEAIihlRBJEKYv/Z4mKAQAxACIoZUQSRCiL/2eJigIAMQAiKGVEEkSxIillRElxCEQyCk8CshGyALITi/+yFIv+shKBBLIQIrIBs4k=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":9,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the TokenizerContract contract
 */
export type TokenizerContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'modify_asa(asset)void': {
      asaId: bigint
    }
    'modify_admin(account)void': {
      admin: Uint8Array | string
    }
    'verified_airdrop(uint64,account)void': {
      amount: bigint | number
      recipient: Uint8Array | string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'modify_asa(asset)void': [asaId: bigint]
    'modify_admin(account)void': [admin: Uint8Array | string]
    'verified_airdrop(uint64,account)void': [amount: bigint | number, recipient: Uint8Array | string]
  }
}

/**
 * The return type for each method
 */
export type TokenizerContractReturns = {
  'modify_asa(asset)void': void
  'modify_admin(account)void': void
  'verified_airdrop(uint64,account)void': void
}

/**
 * Defines the types of available calls and state of the TokenizerContract smart contract.
 */
export type TokenizerContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'modify_asa(asset)void' | 'modify_asa', {
      argsObj: TokenizerContractArgs['obj']['modify_asa(asset)void']
      argsTuple: TokenizerContractArgs['tuple']['modify_asa(asset)void']
      returns: TokenizerContractReturns['modify_asa(asset)void']
    }>
    & Record<'modify_admin(account)void' | 'modify_admin', {
      argsObj: TokenizerContractArgs['obj']['modify_admin(account)void']
      argsTuple: TokenizerContractArgs['tuple']['modify_admin(account)void']
      returns: TokenizerContractReturns['modify_admin(account)void']
    }>
    & Record<'verified_airdrop(uint64,account)void' | 'verified_airdrop', {
      argsObj: TokenizerContractArgs['obj']['verified_airdrop(uint64,account)void']
      argsTuple: TokenizerContractArgs['tuple']['verified_airdrop(uint64,account)void']
      returns: TokenizerContractReturns['verified_airdrop(uint64,account)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: string
        asaId: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TokenizerContractSignatures = keyof TokenizerContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TokenizerContractNonVoidMethodSignatures = keyof TokenizerContractTypes['methods'] extends infer T ? T extends keyof TokenizerContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the TokenizerContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TokenizerContractSignatures> = TokenizerContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TokenizerContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TokenizerContractSignatures> = TokenizerContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = TokenizerContractTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type TokenizerContractCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TokenizerContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TokenizerContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TokenizerContract smart contract
 */
export abstract class TokenizerContractParamsFactory {
  /**
   * Constructs a no op call for the modify_asa(asset)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static modifyAsa(params: CallParams<TokenizerContractArgs['obj']['modify_asa(asset)void'] | TokenizerContractArgs['tuple']['modify_asa(asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'modify_asa(asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asaId],
    }
  }
  /**
   * Constructs a no op call for the modify_admin(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static modifyAdmin(params: CallParams<TokenizerContractArgs['obj']['modify_admin(account)void'] | TokenizerContractArgs['tuple']['modify_admin(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'modify_admin(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.admin],
    }
  }
  /**
   * Constructs a no op call for the verified_airdrop(uint64,account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static verifiedAirdrop(params: CallParams<TokenizerContractArgs['obj']['verified_airdrop(uint64,account)void'] | TokenizerContractArgs['tuple']['verified_airdrop(uint64,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'verified_airdrop(uint64,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.recipient],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the TokenizerContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TokenizerContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TokenizerContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TokenizerContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TokenizerContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the TokenizerContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TokenizerContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new TokenizerContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TokenizerContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TokenizerContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TokenizerContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new TokenizerContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the TokenizerContract smart contract
 */
export class TokenizerContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TokenizerContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the TokenizerContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TokenizerContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TokenizerContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TokenizerContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TokenizerContractClient> {
    return new TokenizerContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TokenizerContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TokenizerContractClient> {
    return new TokenizerContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the TokenizerContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the TokenizerContract smart contract using the `modify_asa(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    modifyAsa: (params: CallParams<TokenizerContractArgs['obj']['modify_asa(asset)void'] | TokenizerContractArgs['tuple']['modify_asa(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TokenizerContractParamsFactory.modifyAsa(params))
    },

    /**
     * Makes a call to the TokenizerContract smart contract using the `modify_admin(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    modifyAdmin: (params: CallParams<TokenizerContractArgs['obj']['modify_admin(account)void'] | TokenizerContractArgs['tuple']['modify_admin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TokenizerContractParamsFactory.modifyAdmin(params))
    },

    /**
     * Makes a call to the TokenizerContract smart contract using the `verified_airdrop(uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    verifiedAirdrop: (params: CallParams<TokenizerContractArgs['obj']['verified_airdrop(uint64,account)void'] | TokenizerContractArgs['tuple']['verified_airdrop(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TokenizerContractParamsFactory.verifiedAirdrop(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the TokenizerContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the TokenizerContract smart contract using the `modify_asa(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    modifyAsa: (params: CallParams<TokenizerContractArgs['obj']['modify_asa(asset)void'] | TokenizerContractArgs['tuple']['modify_asa(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TokenizerContractParamsFactory.modifyAsa(params))
    },

    /**
     * Makes a call to the TokenizerContract smart contract using the `modify_admin(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    modifyAdmin: (params: CallParams<TokenizerContractArgs['obj']['modify_admin(account)void'] | TokenizerContractArgs['tuple']['modify_admin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TokenizerContractParamsFactory.modifyAdmin(params))
    },

    /**
     * Makes a call to the TokenizerContract smart contract using the `verified_airdrop(uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    verifiedAirdrop: (params: CallParams<TokenizerContractArgs['obj']['verified_airdrop(uint64,account)void'] | TokenizerContractArgs['tuple']['verified_airdrop(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TokenizerContractParamsFactory.verifiedAirdrop(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the TokenizerContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the TokenizerContract smart contract using the `modify_asa(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    modifyAsa: async (params: CallParams<TokenizerContractArgs['obj']['modify_asa(asset)void'] | TokenizerContractArgs['tuple']['modify_asa(asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TokenizerContractParamsFactory.modifyAsa(params))
      return {...result, return: result.return as unknown as (undefined | TokenizerContractReturns['modify_asa(asset)void'])}
    },

    /**
     * Makes a call to the TokenizerContract smart contract using the `modify_admin(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    modifyAdmin: async (params: CallParams<TokenizerContractArgs['obj']['modify_admin(account)void'] | TokenizerContractArgs['tuple']['modify_admin(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TokenizerContractParamsFactory.modifyAdmin(params))
      return {...result, return: result.return as unknown as (undefined | TokenizerContractReturns['modify_admin(account)void'])}
    },

    /**
     * Makes a call to the TokenizerContract smart contract using the `verified_airdrop(uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    verifiedAirdrop: async (params: CallParams<TokenizerContractArgs['obj']['verified_airdrop(uint64,account)void'] | TokenizerContractArgs['tuple']['verified_airdrop(uint64,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TokenizerContractParamsFactory.verifiedAirdrop(params))
      return {...result, return: result.return as unknown as (undefined | TokenizerContractReturns['verified_airdrop(uint64,account)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TokenizerContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current TokenizerContract app
   */
  state = {
    /**
     * Methods to access global state for the current TokenizerContract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: result.admin,
          asaId: result.asa_id,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
      /**
       * Get the current value of the asa_id key in global state
       */
      asaId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asa_id")) as bigint | undefined },
    },
  }

  public newGroup(): TokenizerContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a modify_asa(asset)void method call against the TokenizerContract contract
       */
      modifyAsa(params: CallParams<TokenizerContractArgs['obj']['modify_asa(asset)void'] | TokenizerContractArgs['tuple']['modify_asa(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.modifyAsa(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a modify_admin(account)void method call against the TokenizerContract contract
       */
      modifyAdmin(params: CallParams<TokenizerContractArgs['obj']['modify_admin(account)void'] | TokenizerContractArgs['tuple']['modify_admin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.modifyAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a verified_airdrop(uint64,account)void method call against the TokenizerContract contract
       */
      verifiedAirdrop(params: CallParams<TokenizerContractArgs['obj']['verified_airdrop(uint64,account)void'] | TokenizerContractArgs['tuple']['verified_airdrop(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.verifiedAirdrop(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the TokenizerContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TokenizerContractComposer
  }
}
export type TokenizerContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the modify_asa(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  modifyAsa(params?: CallParams<TokenizerContractArgs['obj']['modify_asa(asset)void'] | TokenizerContractArgs['tuple']['modify_asa(asset)void']>): TokenizerContractComposer<[...TReturns, TokenizerContractReturns['modify_asa(asset)void'] | undefined]>

  /**
   * Calls the modify_admin(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  modifyAdmin(params?: CallParams<TokenizerContractArgs['obj']['modify_admin(account)void'] | TokenizerContractArgs['tuple']['modify_admin(account)void']>): TokenizerContractComposer<[...TReturns, TokenizerContractReturns['modify_admin(account)void'] | undefined]>

  /**
   * Calls the verified_airdrop(uint64,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verifiedAirdrop(params?: CallParams<TokenizerContractArgs['obj']['verified_airdrop(uint64,account)void'] | TokenizerContractArgs['tuple']['verified_airdrop(uint64,account)void']>): TokenizerContractComposer<[...TReturns, TokenizerContractReturns['verified_airdrop(uint64,account)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the TokenizerContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TokenizerContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TokenizerContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TokenizerContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TokenizerContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TokenizerContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TokenizerContractComposerResults<TReturns>>
}
export type TokenizerContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

