{
  "version": 3,
  "sources": [
    "../../contract/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAKQ;AAAyB;;AAAzB;AAFR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AAeK;;AAAA;AAAA;AAAA;;AAAA;AAfL;;;AAAA;AAAA;;;AAAA;AAAA;;AAeK;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAVL;;;AAAA;AAAA;;AAUK;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AALL;;;AAAA;AAAA;;AAKK;;;AAAA;;AALL;;AAAA;;;;;;;;;AAKA;;;AAEe;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AACA;AAAA;;AAAA;;AAER;;;AAEe;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AACA;AAAA;;AAAA;;AAER;;;AAEe;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AAEA;AAGiB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACN;;;;;;;;;;;;;;;;;;AAJX;;;;AAAA;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.contract.contract.TokenizerContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"admin\" \"asa_id\""
    },
    "20": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "22": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "25": {
      "op": "bytec_0 // \"admin\"",
      "defined_out": [
        "\"admin\""
      ],
      "stack_out": [
        "\"admin\""
      ]
    },
    "26": {
      "op": "txn Sender",
      "defined_out": [
        "\"admin\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"admin\"",
        "materialized_values%0#0"
      ]
    },
    "28": {
      "op": "app_global_put",
      "stack_out": []
    },
    "29": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "31": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "34": {
      "op": "pushbytess 0x24d4305d 0xbba3da8b 0x2483968b // method \"modify_asa(asset)void\", method \"modify_admin(account)void\", method \"verified_airdrop(uint64,account)void\"",
      "defined_out": [
        "Method(modify_admin(account)void)",
        "Method(modify_asa(asset)void)",
        "Method(verified_airdrop(uint64,account)void)"
      ],
      "stack_out": [
        "Method(modify_asa(asset)void)",
        "Method(modify_admin(account)void)",
        "Method(verified_airdrop(uint64,account)void)"
      ]
    },
    "51": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(modify_admin(account)void)",
        "Method(modify_asa(asset)void)",
        "Method(verified_airdrop(uint64,account)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(modify_asa(asset)void)",
        "Method(modify_admin(account)void)",
        "Method(verified_airdrop(uint64,account)void)",
        "tmp%2#0"
      ]
    },
    "54": {
      "op": "match main_modify_asa_route@5 main_modify_admin_route@6 main_verified_airdrop_route@7",
      "stack_out": []
    },
    "62": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "63": {
      "op": "return",
      "stack_out": []
    },
    "64": {
      "block": "main_verified_airdrop_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "66": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "67": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "68": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "70": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "71": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "74": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "75": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%2#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "78": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "79": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "81": {
      "callsub": "smart_contracts.contract.contract.TokenizerContract.verified_airdrop",
      "op": "callsub verified_airdrop",
      "stack_out": []
    },
    "84": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "85": {
      "op": "return",
      "stack_out": []
    },
    "86": {
      "block": "main_modify_admin_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "88": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "89": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "90": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "92": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "93": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "96": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "97": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "99": {
      "callsub": "smart_contracts.contract.contract.TokenizerContract.modify_admin",
      "op": "callsub modify_admin",
      "stack_out": []
    },
    "102": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "103": {
      "op": "return",
      "stack_out": []
    },
    "104": {
      "block": "main_modify_asa_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "106": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "107": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "108": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "110": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "111": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "114": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "115": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "117": {
      "callsub": "smart_contracts.contract.contract.TokenizerContract.modify_asa",
      "op": "callsub modify_asa",
      "stack_out": []
    },
    "120": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "121": {
      "op": "return",
      "stack_out": []
    },
    "122": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "124": {
      "op": "bnz main_after_if_else@10",
      "stack_out": []
    },
    "127": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "129": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "130": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "131": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "132": {
      "op": "return",
      "stack_out": []
    },
    "133": {
      "subroutine": "smart_contracts.contract.contract.TokenizerContract.modify_asa",
      "params": {
        "asa_id#0": "uint64"
      },
      "block": "modify_asa",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "136": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "138": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "139": {
      "op": "bytec_0 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "140": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "141": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "142": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "143": {
      "op": "assert",
      "stack_out": []
    },
    "144": {
      "op": "bytec_1 // \"asa_id\"",
      "defined_out": [
        "\"asa_id\""
      ],
      "stack_out": [
        "\"asa_id\""
      ]
    },
    "145": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"asa_id\"",
        "asa_id#0 (copy)"
      ],
      "stack_out": [
        "\"asa_id\"",
        "asa_id#0 (copy)"
      ]
    },
    "147": {
      "op": "app_global_put",
      "stack_out": []
    },
    "148": {
      "retsub": true,
      "op": "retsub"
    },
    "149": {
      "subroutine": "smart_contracts.contract.contract.TokenizerContract.modify_admin",
      "params": {
        "admin#0": "bytes"
      },
      "block": "modify_admin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "152": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "154": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "155": {
      "op": "bytec_0 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "156": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "157": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "158": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "159": {
      "op": "assert",
      "stack_out": []
    },
    "160": {
      "op": "bytec_0 // \"admin\"",
      "stack_out": [
        "\"admin\""
      ]
    },
    "161": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"admin\"",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin\"",
        "admin#0 (copy)"
      ]
    },
    "163": {
      "op": "app_global_put",
      "stack_out": []
    },
    "164": {
      "retsub": true,
      "op": "retsub"
    },
    "165": {
      "subroutine": "smart_contracts.contract.contract.TokenizerContract.verified_airdrop",
      "params": {
        "amount#0": "uint64",
        "recipient#0": "bytes"
      },
      "block": "verified_airdrop",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "168": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "170": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "171": {
      "op": "bytec_0 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "172": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "173": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "174": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "175": {
      "error": "Only admin can airdrop",
      "op": "assert // Only admin can airdrop",
      "stack_out": []
    },
    "176": {
      "op": "itxn_begin"
    },
    "177": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "178": {
      "op": "bytec_1 // \"asa_id\"",
      "defined_out": [
        "\"asa_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asa_id\""
      ]
    },
    "179": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "180": {
      "error": "check self.asa_id exists",
      "op": "assert // check self.asa_id exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "181": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "182": {
      "op": "asset_params_get AssetReserve",
      "defined_out": [
        "check%0#0",
        "maybe_value%1#0",
        "value%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "184": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "maybe_value%1#0",
        "value%0#0"
      ]
    },
    "185": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%1#0",
        "value%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "value%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "187": {
      "op": "uncover 2",
      "stack_out": [
        "value%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%1#0"
      ]
    },
    "189": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "value%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "191": {
      "op": "itxn_field Sender",
      "stack_out": [
        "value%0#0"
      ]
    },
    "193": {
      "op": "itxn_field AssetSender",
      "stack_out": []
    },
    "195": {
      "op": "frame_dig -1",
      "defined_out": [
        "recipient#0 (copy)"
      ],
      "stack_out": [
        "recipient#0 (copy)"
      ]
    },
    "197": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "199": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "201": {
      "op": "itxn_field AssetAmount",
      "stack_out": []
    },
    "203": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "205": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "207": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "208": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "210": {
      "op": "itxn_submit"
    },
    "211": {
      "retsub": true,
      "op": "retsub"
    }
  }
}